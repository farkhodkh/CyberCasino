// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package ru.cybercasino.feature.auth_api.requests

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class RegistrationRequestSchemaJsonAdapter(
  moshi: Moshi
) : JsonAdapter<RegistrationRequestSchema>() {
  private val options: JsonReader.Options = JsonReader.Options.of("email", "phone", "password",
      "code", "currency")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "email")

  public override fun toString(): String = buildString(47) {
      append("GeneratedJsonAdapter(").append("RegistrationRequestSchema").append(')') }

  public override fun fromJson(reader: JsonReader): RegistrationRequestSchema {
    var email: String? = null
    var phone: String? = null
    var password: String? = null
    var code: String? = null
    var currency: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> email = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("email", "email",
            reader)
        1 -> phone = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("phone", "phone",
            reader)
        2 -> password = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("password",
            "password", reader)
        3 -> code = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("code", "code",
            reader)
        4 -> currency = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("currency",
            "currency", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return RegistrationRequestSchema(
        email = email ?: throw Util.missingProperty("email", "email", reader),
        phone = phone ?: throw Util.missingProperty("phone", "phone", reader),
        password = password ?: throw Util.missingProperty("password", "password", reader),
        code = code ?: throw Util.missingProperty("code", "code", reader),
        currency = currency ?: throw Util.missingProperty("currency", "currency", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: RegistrationRequestSchema?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("email")
    stringAdapter.toJson(writer, value_.email)
    writer.name("phone")
    stringAdapter.toJson(writer, value_.phone)
    writer.name("password")
    stringAdapter.toJson(writer, value_.password)
    writer.name("code")
    stringAdapter.toJson(writer, value_.code)
    writer.name("currency")
    stringAdapter.toJson(writer, value_.currency)
    writer.endObject()
  }
}
