// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package ru.cybercasino.feature.auth_api.responces

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class UserResponceSchemaJsonAdapter(
  moshi: Moshi
) : JsonAdapter<UserResponceSchema>() {
  private val options: JsonReader.Options = JsonReader.Options.of("pk", "username", "email",
      "first_name", "last_name", "domain")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "pk")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "username")

  public override fun toString(): String = buildString(40) {
      append("GeneratedJsonAdapter(").append("UserResponceSchema").append(')') }

  public override fun fromJson(reader: JsonReader): UserResponceSchema {
    var pk: Int? = null
    var username: String? = null
    var email: String? = null
    var firstName: String? = null
    var lastName: String? = null
    var domain: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> pk = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("pk", "pk", reader)
        1 -> username = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("username",
            "username", reader)
        2 -> email = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("email", "email",
            reader)
        3 -> firstName = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("firstName",
            "first_name", reader)
        4 -> lastName = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("lastName",
            "last_name", reader)
        5 -> domain = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("domain",
            "domain", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return UserResponceSchema(
        pk = pk ?: throw Util.missingProperty("pk", "pk", reader),
        username = username ?: throw Util.missingProperty("username", "username", reader),
        email = email ?: throw Util.missingProperty("email", "email", reader),
        firstName = firstName ?: throw Util.missingProperty("firstName", "first_name", reader),
        lastName = lastName ?: throw Util.missingProperty("lastName", "last_name", reader),
        domain = domain ?: throw Util.missingProperty("domain", "domain", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: UserResponceSchema?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("pk")
    intAdapter.toJson(writer, value_.pk)
    writer.name("username")
    stringAdapter.toJson(writer, value_.username)
    writer.name("email")
    stringAdapter.toJson(writer, value_.email)
    writer.name("first_name")
    stringAdapter.toJson(writer, value_.firstName)
    writer.name("last_name")
    stringAdapter.toJson(writer, value_.lastName)
    writer.name("domain")
    stringAdapter.toJson(writer, value_.domain)
    writer.endObject()
  }
}
