// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package ru.cybercasino.feature.auth.api.requests

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class LoginRequestSchemaJsonAdapter(
  moshi: Moshi
) : JsonAdapter<LoginRequestSchema>() {
  private val options: JsonReader.Options = JsonReader.Options.of("username", "email", "phone",
      "password")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "username")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "password")

  @Volatile
  private var constructorRef: Constructor<LoginRequestSchema>? = null

  public override fun toString(): String = buildString(40) {
      append("GeneratedJsonAdapter(").append("LoginRequestSchema").append(')') }

  public override fun fromJson(reader: JsonReader): LoginRequestSchema {
    var username: String? = null
    var email: String? = null
    var phone: String? = null
    var password: String? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          username = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          email = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          phone = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> password = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("password",
            "password", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffff8.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  LoginRequestSchema(
          username = username,
          email = email,
          phone = phone,
          password = password ?: throw Util.missingProperty("password", "password", reader)
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<LoginRequestSchema> = this.constructorRef ?:
          LoginRequestSchema::class.java.getDeclaredConstructor(String::class.java,
          String::class.java, String::class.java, String::class.java, Int::class.javaPrimitiveType,
          Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
      return localConstructor.newInstance(
          username,
          email,
          phone,
          password ?: throw Util.missingProperty("password", "password", reader),
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: LoginRequestSchema?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("username")
    nullableStringAdapter.toJson(writer, value_.username)
    writer.name("email")
    nullableStringAdapter.toJson(writer, value_.email)
    writer.name("phone")
    nullableStringAdapter.toJson(writer, value_.phone)
    writer.name("password")
    stringAdapter.toJson(writer, value_.password)
    writer.endObject()
  }
}
