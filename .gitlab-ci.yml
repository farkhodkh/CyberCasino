image: openjdk:8-jdk
stages:
  - build-google-play
  - build-app-gallery
  - check-google-play
  - check-app-gallery
  - sign-google-play
  - sign-app-gallery
  - deploy-google-play
  - deploy-app-gallery
variables:
  ANDROID_COMPILE_SDK: "29"
  ANDROID_BUILD_TOOLS: "29.0.3"
  ANDROID_SDK_TOOLS: "6514223"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  APT_DIR: "$CI_PROJECT_DIR/apt-cache"
  FIREBASE_APP_ID: '1:694184628268:android:52de72ddaa1f701eb60189'
  ANDROID_RELEASE_STORE_FILE: "${CI_PROJECT_DIR}/cyber_casino.jks"
  BUILD_OUTPUTS: "${CI_PROJECT_DIR}/app/build/outputs/bundle/"
  PUBLISHING_FORMAT: 'aab'

cache: &global_cache
  # For huawei jobs use key ${CI_PROJECT_PATH_SLUG}-app-gallery
  key: ${CI_PROJECT_PATH_SLUG}-google-play
  paths:
    - build
    - .gradle
    - apt-cache
  policy: pull-push

.build-before-script: &build-before-script
  - export GRADLE_USER_HOME="${PWD}/.gradle"
  - mkdir -pv "${APT_DIR}"
  - apt --quiet --yes --option "Dir::Cache::Archives"="${APT_DIR}" update
  - apt --quiet --yes --option "Dir::Cache::Archives"="${APT_DIR}" install wget tar unzip lib32stdc++6 lib32z1
  - export ANDROID_HOME="${PWD}/android-home"
  - install -d $ANDROID_HOME
  - wget --quiet --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
  - pushd $ANDROID_HOME
  - unzip -q -d cmdline-tools cmdline-tools.zip
  - popd
  - export PATH=$PATH:${ANDROID_HOME}/cmdline-tools/tools/bin/
  - sdkmanager --version
  - yes | sdkmanager --sdk_root=${ANDROID_HOME} --licenses || true
  - sdkmanager --sdk_root=${ANDROID_HOME} "platforms;android-${ANDROID_COMPILE_SDK}"
  - sdkmanager --sdk_root=${ANDROID_HOME} "platform-tools"
  - sdkmanager --sdk_root=${ANDROID_HOME} "build-tools;${ANDROID_BUILD_TOOLS}"
  - chmod +x ./gradlew
  - echo "${ANDROID_RELEASE_STORE_FILE_BASE64}" | base64 --decode - > "${ANDROID_RELEASE_STORE_FILE}"
  - ANDROID_RELEASE_KEY_ALIAS=$(echo "${ANDROID_RELEASE_KEY_ALIAS_BASE64}" | base64 --decode -)
  - ANDROID_RELEASE_KEY_PASSWORD=$(echo "${ANDROID_RELEASE_KEY_PASSWORD_BASE64}" | base64 --decode -)
  - ANDROID_RELEASE_STORE_PASSWORD=$(echo "${ANDROID_RELEASE_STORE_PASSWORD_BASE64}" | base64 --decode -)

.build-job:
  tags:
    - android
  environment:
    name: $CI_COMMIT_BRANCH
  allow_failure: false
  except:
    - tags
    - merge_requests
    - external_pull_requests
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME-$CI_JOB_STAGE-$CI_COMMIT_SHORT_SHA"
    paths:
      - app/build/outputs/bundle
      - app/build/outputs/logs
    reports:
      dotenv: build.env
  dependencies: []
  before_script:
    - *build-before-script
  script:
    - ./gradlew "${GRADLE_TASK}" --build-cache
    - rm --force --recursive "${ANDROID_HOME}/"
    - if [ $(find "${BUILD_OUTPUTS}" -name *.${PUBLISHING_FORMAT} -print | wc --lines) -ne 1 ]; then echo "More or less then 1 ${PUBLISHING_FORMAT} file"; exit 2; fi
    - ARTIFACT_APP_FILE=$(find "${BUILD_OUTPUTS}" -name *.${PUBLISHING_FORMAT} -print)
    - echo "ARTIFACT_APP_FILE=${ARTIFACT_APP_FILE}" > build.env
    - rm --force "${ANDROID_RELEASE_STORE_FILE}"

.check-job:
  tags:
    - android
  environment:
    name: $CI_COMMIT_BRANCH
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME-$CI_JOB_STAGE-$CI_COMMIT_SHORT_SHA-lint"
    paths:
      - app/build/reports/
  dependencies: []
  before_script:
    - *build-before-script
  script:
    - ./gradlew "${GRADLE_TASK}" -Pci --build-cache --console=plain
    - rm --force --recursive "${ANDROID_RELEASE_STORE_FILE}" "${ANDROID_HOME}/"

.sign-job:
  stage: sign
  tags:
    - android
  environment:
    name: $CI_COMMIT_BRANCH
  except:
    - tags
    - merge_requests
    - external_pull_requests
  cache: {}
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_COMMIT_REF_NAME-$CI_JOB_STAGE-$CI_COMMIT_SHORT_SHA"
    paths:
      - app/build/outputs/bundle
      - app/build/outputs/logs
    reports:
      dotenv: build.env
  script:
    - echo "${ANDROID_RELEASE_STORE_FILE_BASE64}" | base64 --decode - > "${ANDROID_RELEASE_STORE_FILE}"
    - ANDROID_RELEASE_KEY_ALIAS=$(echo "${ANDROID_RELEASE_KEY_ALIAS_BASE64}" | base64 --decode -)
    - ANDROID_RELEASE_KEY_PASSWORD=$(echo "${ANDROID_RELEASE_KEY_PASSWORD_BASE64}" | base64 --decode -)
    - ANDROID_RELEASE_STORE_PASSWORD=$(echo "${ANDROID_RELEASE_STORE_PASSWORD_BASE64}" | base64 --decode -)
    - echo "ARTIFACT_APP_FILE=${ARTIFACT_APP_FILE}"
    - echo "ARTIFACT_APP_FILE=${ARTIFACT_APP_FILE}" > build.env
    - jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore "${ANDROID_RELEASE_STORE_FILE}" -storepass "${ANDROID_RELEASE_STORE_PASSWORD}" -storetype jks "${ARTIFACT_APP_FILE}" -tsa http://timestamp.digicert.com "${ANDROID_RELEASE_KEY_ALIAS}"
    - jarsigner -verify $ARTIFACT_APP_FILE

.deploy-job:
  tags:
    - android
  environment:
    name: $CI_COMMIT_BRANCH
  allow_failure: false
  except:
    - tags
    - merge_requests
    - external_pull_requests
  cache: {}
  before_script:
    - apt-get --quiet --yes update
    - apt-get --quiet --yes install sudo
    - curl --silent --location https://firebase.tools | bash
    - firebase --version
  script:
    - echo "ARTIFACT_APP_FILE=${ARTIFACT_APP_FILE}"
    - ls -l "${ARTIFACT_APP_FILE}"
    - jarsigner -verify $ARTIFACT_APP_FILE
    - firebase appdistribution':'distribute "${ARTIFACT_APP_FILE}" --app "${FIREBASE_APP_ID}" --groups "${FIREBASE_GROUPS}" --token "${FIREBASE_TOKEN}" --release-notes "${FIREBASE_RELEASE_NOTES}"

build-release-google-play:
  stage: build-google-play
  extends: .build-job
  variables:
    GRADLE_TASK: ':app:bundleRelease'
  only:
    - master

build-release-app-gallery:
  stage: build-app-gallery
  cache:
    <<: *global_cache
    key: ${CI_PROJECT_PATH_SLUG}-app-gallery
  extends: .build-job
  variables:
    GRADLE_TASK: ':app:bundleReleaseAppGallery'
  only:
    - master

build-debug-google-play:
  stage: build-google-play
  extends: .build-job
  variables:
    GRADLE_TASK: ':app:bundleDebug'
  only:
    - development

build-debug-app-gallery:
  stage: build-app-gallery
  cache:
    <<: *global_cache
    key: ${CI_PROJECT_PATH_SLUG}-app-gallery
  extends: .build-job
  when: manual
  allow_failure: true
  variables:
    GRADLE_TASK: ':app:bundleDebugAppGallery'
  only:
    - development

check-release-google-play:
  stage: check-google-play
  cache:
    <<: *global_cache
    policy: pull
  extends: .check-job
  variables:
    GRADLE_TASK: ':app:lintRelease'
  only:
    - master

check-release-app-gallery:
  stage: check-app-gallery
  cache:
    <<: *global_cache
    policy: pull
    key: ${CI_PROJECT_PATH_SLUG}-app-gallery
  extends: .check-job
  variables:
    GRADLE_TASK: ':app:lintReleaseAppGallery'
  only:
    - master

# По просьбе А.Ерёменко job не выполняется для debug-сборок
.check-debug-google-play:
  stage: check-google-play
  cache:
    <<: *global_cache
    policy: pull
  extends: .check-job
  variables:
    GRADLE_TASK: ':app:lintDebug'
  only:
    - development

# По просьбе А.Ерёменко job не выполняется для debug-сборок
.check-debug-app-gallery:
  stage: check-app-gallery
  cache:
    <<: *global_cache
    policy: pull
    key: ${CI_PROJECT_PATH_SLUG}-app-gallery
  extends: .check-job
  variables:
    GRADLE_TASK: ':app:lintDebugAppGallery'
  only:
    - development

# По Г.Кузнецова подписывание выполняется только для release-сборок
sign-release-google-play:
  stage: sign-google-play
  extends: .sign-job
  dependencies:
    - build-release-google-play
  only:
    - master

# По Г.Кузнецова подписывание выполняется только для release-сборок
sign-release-app-gallery:
  stage: sign-app-gallery
  extends: .sign-job
  dependencies:
    - build-release-app-gallery
  only:
    - master

deploy-release-google-play:
  stage: deploy-google-play
  extends: .deploy-job
  dependencies:
    - sign-release-google-play
  variables:
    FIREBASE_GROUPS: "googleplay_release"
    FIREBASE_RELEASE_NOTES: "google release\n${CI_COMMIT_MESSAGE}"
  only:
    - master

deploy-release-app-gallery:
  stage: deploy-app-gallery
  extends: .deploy-job
  dependencies:
    - sign-release-app-gallery
  variables:
    FIREBASE_GROUPS: "appgallery_release"
    FIREBASE_RELEASE_NOTES: "huawei release\n${CI_COMMIT_MESSAGE}"
  only:
    - master

deploy-debug-google-play:
  stage: deploy-google-play
  extends: .deploy-job
  dependencies:
    - build-debug-google-play
  variables:
    FIREBASE_GROUPS: "googleplay_debug"
    # По просьбе А.Ерёменко FIREBASE_RELEASE_NOTES состоит из двух строк
    FIREBASE_RELEASE_NOTES: "google debug\n${CI_COMMIT_MESSAGE}"
  only:
    - development

deploy-debug-app-gallery:
  stage: deploy-app-gallery
  extends: .deploy-job
  # allow_failure: true
  dependencies:
    - build-debug-app-gallery
  needs:
    - job: build-debug-app-gallery
      artifacts: true
  variables:
    FIREBASE_GROUPS: "appgallery_debug"
    # По просьбе А.Ерёменко FIREBASE_RELEASE_NOTES состоит из двух строк
    FIREBASE_RELEASE_NOTES: "huawei debug\n${CI_COMMIT_MESSAGE}"
  only:
    - development
